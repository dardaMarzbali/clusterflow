#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem = '';
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print 3;
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print '3G';
	exit;
}

# MODULE
# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";



# Go through each file and deduplicate
if($files && scalar(@$files) > 0){
	foreach my $file (@$files){
		
		my $output_fn = substr($file,0 ,-3)."deduplicated.bam";
		
		# Find if PE or SE from input BAM file
		if(CF::Helpers::is_bam_paired_end($file)){
		
			# Paired End BAM file
			if(!system ("deduplicate_bismark -p --bam $file")){
				# Bismark worked - print out resulting filenames
				warn "Bismark deduplication (PE mode) successfully exited..\n";
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n"; 
				} else {
					warn "\nBismark output file $output_fn not found..\n";
				}
			}
			
		} else {
		
			# Single End BAM file
			if(!system ("deduplicate_bismark -s --bam $file")){
				# Bismark worked - print out resulting filenames
				warn "Bismark deduplication (SE mode) successfully exited..\n";
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n"; 
				} else {
					warn "\nBismark output file $output_fn not found..\n";
				}
			}
			
		}
	}
}


close (RUN);