#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem=s" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print CF::Helpers::allocate_cores($required_cores, 1, 6);
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print CF::Helpers::allocate_memory($required_mem, '3G', '4G');
	exit;
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
	print 'tophat';
	exit;
}
# --help. Print help.
if($help){
	print "TopHat is a fast splice junction mapper for RNA-Seq reads.
It aligns RNA-Seq reads to mammalian-sized genomes using the ultra
high-throughput short read aligner Bowtie, and then analyzes the
mapping results to identify splice junctions between exons.\n
This module detects the encoding of input fastq files and whether
they're paired end or not. It can run with or without a supplied
GTF path (\@gtf_path) but requires a bowtie path (\@bowtie_path).\n\n";
	exit;
}

# MODULE
my $timestart = time;

# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

# Check that we have a genome defined
if(!defined($config{bowtie_path})){
	warn "\n\n###CF No bowtie path found in run file $runfile for job $job_id. Exiting.. ###";
	exit;
} else {
	warn "\nAligning against bowtie path: ".$config{bowtie_path}."\n\n";
}


my $gtf = '';
if(defined($config{gtf_path})){
	warn "\nUsing GTF path: ".$config{gtf_path}."\n\n";
	$gtf = " -G ".$config{gtf_path};
}

if(!defined($cores) || $cores <= 0){
	$cores = 1;
}

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Separate file names into single end and paired end
my ($se_files, $pe_files) = CF::Helpers::is_paired_end(\%config, @$files);

# FastQ encoding type. Once found on one file will assume all others are the same
my $encoding = 0;

# Go through each single end files and run Tophat
if($se_files && scalar(@$se_files) > 0){
	foreach my $file (@$se_files){
		
		# Figure out the encoding if we don't already know
		if(!$encoding){
			($encoding) = CF::Helpers::fastq_encoding_type($file);
		}
		# Tophat only accepts --solexa-quals, --solexa1.3-quals and --integer-quals 
		my $enc = "";
		if($encoding eq 'solexa'){
			$enc = '--solexa-quals';
		} elsif($encoding eq 'phred64'){
			$enc = '--solexa1.3-quals';
		} elsif($encoding eq 'phred33'){
			$enc = '--solexa-quals';
		} elsif($encoding eq 'integer'){
			$enc = '--integer-quals';
		}
		
		my $output_dir = $file;
		$output_dir =~ s/.gz$//;
		$output_dir =~ s/.fq$//;
		$output_dir =~ s/.fastq$//;
		$output_dir =~ s/_1$//;
		$output_dir =~ s/_2$//;
		$output_dir .= '_tophat';
		
		my $output_fn = $output_dir."/accepted_hits.bam";
		
		my $command = "tophat -p $cores -g 1 $enc $gtf -o $output_dir ".$config{bowtie_path}." $file";
		warn "\nRunning command:\n$command\n\n";
		
		if(!system ($command)){
			# Tophat worked - print out resulting filenames
			my $duration =  CF::Helpers::parse_seconds(time - $timestart);
			warn "###CF Tophat (SE mode) successfully exited, took $duration..\n";
			if(-e $output_fn){
				print RUN "$job_id\t$output_fn\n"; 
			} else {
				warn "\nTophat output file $output_fn not found..\n";
			}
		} else {
			warn "\n###CF ## Tophat (SE mode) failed ##\n\n";
		}
	}
}

# Go through the paired end files and run Tophat
if($pe_files && scalar(@$pe_files) > 0){
	foreach my $files_ref (@$pe_files){
		my @files = @$files_ref;
		if(scalar(@files) == 2){
			
			# Figure out the encoding if we don't already know
			if(!$encoding){
				($encoding) = CF::Helpers::fastq_encoding_type($files[0]);
			}
			# Tophat only accepts --solexa-quals, --solexa1.3-quals and --integer-quals 
			my $enc = "";
			if($encoding eq 'solexa'){
				$enc = '--solexa-quals';
			} elsif($encoding eq 'phred64'){
				$enc = '--solexa1.3-quals';
			} elsif($encoding eq 'phred33'){
				$enc = '--solexa-quals';
			} elsif($encoding eq 'integer'){
				$enc = '--integer-quals';
			}
			
			my $output_dir = $files[0];
			$output_dir =~ s/.gz$//;
			$output_dir =~ s/.fq$//;
			$output_dir =~ s/.fastq$//;
			$output_dir =~ s/_1$//;
			$output_dir =~ s/_2$//;
			$output_dir =~ s/_R?[1-4]//;
			$output_dir .= '_tophat';
			
			my $output_fn = $output_dir."/accepted_hits.bam";
			
			my $command = "tophat -p $cores -g 1 $enc $gtf -o $output_dir ".$config{bowtie_path}." ".$files[0]." ".$files[1];
			warn "\nRunning command:\n$command\n\n";
			
			if(!system ($command)){
				# Tophat worked - print out resulting filenames
				my $duration =  CF::Helpers::parse_seconds(time - $timestart);
				warn "###CF Tophat (PE mode) successfully exited, took $duration....\n";
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n";
				} else {
					warn "\n###CF ## Tophat output file $output_fn not found ##\n";
				}
			} else {
				warn "\n###CF ## Tophat (PE mode) failed ##\n\n";
			}
		} else {
			warn "\n###CF ## Tophat paired end files had ".scalar(@files)." input files instead of 2 ##\n";
		}
	}
}


close (RUN);