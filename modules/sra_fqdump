#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem = '';
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print 3;
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print '3G';
	exit;
}

# MODULE
# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Go through each supplied file and run fastq-dump.
foreach my $file (@$files){

	my $fn_base = substr($file, 0, -4);
	my @outputfiles = ($fn_base."_1.fastq", $fn_base."_2.fastq");
	
	for (my $attempt = 1; $attempt < 6; $attempt++) {
		
		my $command = "fastq-dump --split-files ./$file";
		warn "\nRunning command:\n$command\n\n";
		
		if(!system ($command)){
			warn "\nFastQ Dump successfully exited on attempt $attempt\n";
			# FastQ Dump worked - print out resulting filenames
			foreach my $output_fn (@outputfiles){
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n";
				} else {
					warn "\nSRA dump file $output_fn not found.. (Probably single end?)\n\n";
				}
			}
			last;
			
		} else {
			
			# FastQ Dump failed - clean up partially dumped files
			foreach my $output_fn (@outputfiles){
				if(-e $output_fn){
					unlink $output_fn or die "Could not delete $output_fn : $!";
				}
			}
			warn "FastQ Dump failed on attempt $attempt: $? $!\n";
			
		}
	}
}

close (RUN);