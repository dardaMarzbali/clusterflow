#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print 6;
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print '3G';
	exit;
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
	print 'bowtie';
	exit;
}
# --help. Print help.
if($help){
	print "Bowtie is an ultrafast, memory-efficient short read aligner.
It aligns short DNA sequences (reads) to a reference genome. This script
works out the encoding of input files, guesses whether they're paired end
or not and runs bowtie.\n
For further information, please run bowtie --help\n\n";
	exit;
}

# MODULE
# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

# Check that we have a genome defined
if(!defined($config{bowtie_path})){
	warn "\n\n### No bowtie path found in run file $runfile for job $job_id. Exiting.. ###";
	exit;
} else {
	warn "\nAligning against ".$config{bowtie_path}."\n\n";
}

if(!defined($cores) || $cores <= 0){
	$cores = 1;
}

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Separate file names into single end and paired end
my ($se_files, $pe_files) = CF::Helpers::is_paired_end(\%config, @$files);

# FastQ encoding type. Once found on one file will assume all others are the same
my $encoding = 0;

# Go through each single end files and run Bowtie
if($se_files && scalar(@$se_files) > 0){
	foreach my $file (@$se_files){
		
		# Figure out the encoding if we don't already know
		if(!$encoding){
			($encoding) = CF::Helpers::fastq_encoding_type($file);
		}
		my $enc = "";
		if($encoding eq 'phred33' || $encoding eq 'phred64' || $encoding eq 'solexa'){
			$enc = '--'.$encoding.'-quals';
		}
		
		my $output_fn = $file."_bowtie.bam";
		
		my $gzip = "";
		if($file =~ /\.gz$/){
			$gzip = "gzip -dc $file | ";
			$file = "-";
		}
		
		my $command = "$gzip bowtie -p $cores -t -m 1 $enc --strata --best -S --chunkmbs 2048 ".$config{bowtie_path}." $file | samtools view -bSh 2>/dev/null - > $output_fn";
		warn "\nRunning command:\n$command\n\n";
		
		if(!system ($command)){
			# Bowtie worked - print out resulting filenames
			warn "###CF Bowtie (SE mode) successfully exited..\n";
			if(-e $output_fn){
				print RUN "$job_id\t$output_fn\n"; 
			} else {
				warn "\nBowtie output file $output_fn not found..\n";
			}
		} else {
			warn "\n###CF Bowtie (SE mode) failed. ###\n\n";
		}
	}
}

# Go through the paired end files and run Bowtie
if($pe_files && scalar(@$pe_files) > 0){
	foreach my $files_ref (@$pe_files){
		my @files = @$files_ref;
		if(scalar(@files) == 2){
			
			# Figure out the encoding if we don't already know
			if(!$encoding){
				($encoding) = CF::Helpers::fastq_encoding_type($files[0]);
			}
			my $enc = "";
			if($encoding eq 'phred33' || $encoding eq 'phred64' || $encoding eq 'solexa'){
				$enc = '--'.$encoding.'-quals';
			}
			
			# Unzip gzipped input files
			if($files[0] =~ /.gz$/){
				warn "Unzipping input files..\n";
				system("gunzip ".$files[0]);
				system("gunzip ".$files[1]);
				$files[0] =~ s/.gz$//;
				$files[1] =~ s/.gz$//;
			}
			
			my $output_fn = $files[0]."_bowtie.bam";
			
			my $command = "bowtie -p $cores -t -m 1 $enc --strata --best --maxins 700 -S --chunkmbs 2048 ".$config{bowtie_path}." -1 ".$files[0]." -2 ".$files[1]." | samtools view -bSh 2>/dev/null - > $output_fn";
			warn "\nRunning command:\n$command\n\n";
			
			if(!system ($command)){
				# Bowtie worked - print out resulting filenames
				warn "###CF Bowtie (PE mode) successfully exited..\n";
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n";
				} else {
					warn "\nBowtie output file $output_fn not found..\n";
				}
			} else {
				warn "\n###CF Bowtie (PE mode) failed. ###\n\n";
			}
			
			# Zip input files up again
			warn "Zipping input files..\n";
			system("gzip ".$files[0]);
			system("gzip ".$files[1]);
			
		} else {
			warn "\n###CF Bowtie paired end files had ".scalar(@files)." input files instead of 2..\n";
		}
	}
}


close (RUN);