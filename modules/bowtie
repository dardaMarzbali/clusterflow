#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem = '';
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print 1;
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print '3G';
	exit;
}

# MODULE
# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

# Check that we have a genome defined
if(!defined($config{genome_path})){
	warn "\n\n### No genome path found in run file $runfile for job $job_id. Exiting.. ###";
	exit;
}

if(!defined($cores) || $cores <= 0){
	$cores = 1;
}

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Separate file names into single end and paired end
my ($se_files, $pe_files) = CF::Helpers::is_paired_end(@$files);


# Go through each single end files and run Bowtie
if($se_files && scalar(@$se_files) > 0){
	foreach my $file (@$se_files){
		
		my $output_fn = $file."_bowtie.bam";
		
		if(!system ("bowtie -p $cores -t -m 1 --strata --best -S --chunkmbs 2048 ".$config{genome_path}." ".$file." | samtools view -bSh 2>/dev/null - > $output_fn")){
			# Bowtie worked - print out resulting filenames
			warn "Bowtie (SE mode) successfully exited..\n";
			if(-e $output_fn){
				print RUN "$job_id\t$output_fn\n"; 
			} else {
				warn "\nBowtie output file $output_fn not found..\n";
			}
		}
	}
}

# Go through the paired end files and run Bowtie
if($pe_files && scalar(@$pe_files) > 0){
	foreach my $files_ref (@$pe_files){
		my @files = @$files_ref;
		if(scalar(@files) == 2){
			
			my $output_fn = $files[0]."_bowtie.bam";
			
			if(!system ("bowtie -p $cores -t -m 1 --strata --best --maxins 700 -S --chunkmbs 2048 ".$config{genome_path}." -1 ".$files[0]." -2 ".$files[1]." | samtools view -bSh 2>/dev/null - > $output_fn")){
				# Bowtie worked - print out resulting filenames
				warn "Bowtie (PE mode) successfully exited..\n";
				if(-e $output_fn){
					print RUN "$job_id\t$output_fn\n";
				} else {
					warn "\nBowtie output file $output_fn not found..\n";
				}
			}
		} else {
			warn "\nBowtie paired end files had ".scalar(@files)." input files instead of 2..\n";
		}
	}
}


close (RUN);