#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print 1;
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print CF::Helpers::allocate_memory($required_mem, '3G', '10G');
	exit
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
	print 'bismark';
	exit;
}
# --help. Print help.
if($help){
	print "".("-"x38)."\n Bismark Methylation Extractor Module\n".("-"x38)."\n
The bismark_methXtract module runs the bismark_methylation_extractor script.
This reads in a bisulfite read alignment results file produced by the Bismark bisulfite
mapper and extracts the methylation information for individual cytosines in CpG, CHG 
and CHH context.\n
Specifying the pbat or single_cell parameters in a pipeline
will add --ignore 4 to the command. eg:
  #bismark_methXtract	pbat
or
  #bismark_methXtract	single_cell
Runs the command:
  bismark_methylation_extractor --ignore 4 ....\n
Use bismark_methylation_extractor --help for more information.\n\n";
	exit;
}

# MODULE
my $timestart = time;

# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Set buffer size
my $buffer = "";
if($mem =~ /G$/){
	($buffer = $mem) =~ s/G//;
	$buffer = "--buffer ".($buffer - 1)."G";
}

# Read any options from the pipeline parameters
my $ignore_r1 = "";
my $ignore_r2 = "--ignore_r2 2";
foreach my $parameter (@$parameters){
	if($parameter == "pbat" || $parameter == "single_cell"){
		$ignore_r1 = "--ignore 4";
		$ignore_r2 = "--ignore_r2 4";
	}
}
 


# Go through each file and deduplicate
if($files && scalar(@$files) > 0){
	foreach my $file (@$files){
		
		# Find if PE or SE from input BAM file
		if(CF::Helpers::is_bam_paired_end($file)){
			
			my $command = "bismark_methylation_extractor $ignore_r1 $ignore_r2 --bedGraph --counts $buffer --gzip -p --no_overlap --report $file";
			warn "\nRunning command:\n$command\n\n";
			
			# Paired End BAM file
			if(!system ($command)){
				# Bismark worked - print out resulting filenames
				my $duration =  CF::Helpers::parse_seconds(time - $timestart);
				warn "###CF Bismark methylation extractor (PE mode) successfully exited, took $duration..\n";
				my @output_fns = find_Xtracted_fns($file);
				if(scalar(@output_fns) > 0){
					foreach(@output_fns){
						print RUN "$job_id\t$_\n"; 
					}
				} else {
					warn "\nNo bismark meth extrator output files found..\n";
				}
			} else {
				die "###CF Bismark MethXtractor (PE mode) exited with an error state ###\n\n";
			}
			
		} else {
			
			my $command = "bismark_methylation_extractor $ignore_r1 --bedGraph --counts $buffer --gzip -s --report $file";
			warn "\nRunning command:\n$command\n\n";
			
			# Single End BAM file
			if(!system ($command)){
				# Bismark worked - print out resulting filenames
				my $duration =  CF::Helpers::parse_seconds(time - $timestart);
				warn "###CF Bismark methylation extractor (SE mode) successfully exited, took $duration..\n";
				my @output_fns = find_Xtracted_fns($file);
				if(scalar(@output_fns) > 0){
					foreach(@output_fns){
						print RUN "$job_id\t$_\n"; 
					}
				} else {
					warn "\nNo bismark meth extrator output files found..\n";
				}
			} else {
				die "###CF Bismark MethXtractor (SE mode) exited with an error state ###\n\n";
			}
			
		}
	}
}

sub find_Xtracted_fns {

	my ($file) = @_;
	
	# strip BAM / SAM file extension
	$file =~ s/.[bs]am$//; 
	
	my @files;
	
	# loop through all files in directory looking for matching filenames
	foreach (glob('*.txt *.gz')) {
		# \Q .. \E provides $file as a literal
		if(/^(CpG|Non_CpG|CHG|CHH)_[COBT]+_\Q$file\E\.txt(\.gz)?$/){
			push @files, $_;
		}
	}
	
	return @files;
	
}



close (RUN);