#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($Bin);
use lib "$FindBin::Bin/../source";
use CF::Constants;
use CF::Helpers;

# Get Options
my $required_cores;
my $required_mem;
my $required_modules;
my $help;
my $result = GetOptions ("cores=i" => \$required_cores, "mem=s" => \$required_mem, "modules" => \$required_modules, "help" => \$help);

# QSUB SETUP
# --cores i = offered cores. Return number of required cores.
if($required_cores){
	print CF::Helpers::allocate_cores($required_cores, 2, 3);
	exit;
}
# --mem. Return the required memory allocation.
if($required_mem){
	print '3G';
	exit;
}
# --modules. Return csv names of any modules which should be loaded.
if($required_modules){
	print 'trim_galore';
	exit;
}
# --help. Print help.
if($help){
	print "Trim Galore is a wrapper tool around Cutadapt and FastQC
to consistently apply quality and adapter trimming to FastQ files.\n
This module intelligently works on single end and paired end input files
and tries to calculate input file fastq encoding.\n\n";
	exit;
}

# MODULE
my $timestart = time;

# Read in the input files from the run file
my ($files, $runfile, $job_id, $prev_job_id, $cores, $mem, $parameters, $config_ref) = CF::Helpers::load_runfile_params(@ARGV);
my %config = %$config_ref;

open (RUN,'>>',$runfile) or die "Can't write to $runfile: $!";

# Separate file names into single end and paired end
my ($se_files, $pe_files) = CF::Helpers::is_paired_end(\%config, @$files);

# FastQ encoding type. Once found on one file will assume all others are the same
my $encoding = 0;

# Read any options from the pipeline parameters
my $RRBS = "";
foreach my $parameter (@$parameters){
	if($parameter eq "RRBS"){
		$RRBS = "--RRBS";
	}
}

# Go through each single end files and run trim galore
if($se_files && scalar(@$se_files) > 0){
	foreach my $file (@$se_files){
		
		# Figure out the encoding if we don't already know
		if(!$encoding){
			($encoding) = CF::Helpers::fastq_encoding_type($file);
		}
		my $enc = "";
		if($encoding eq 'phred33' || $encoding eq 'phred64'){
			$enc = '--'.$encoding;
		}
		
		my $output_fn = trim_galore_basename($file).'_trimmed.fq.gz';
		
		my $command = "trim_galore --trim1 --gzip $enc $RRBS --fastqc $file";
		warn "\nRunning command:\n$command\n\n";
		
		if(!system ($command)){
			# Trim Galore worked - print out resulting filenames
			my $duration =  CF::Helpers::parse_seconds(time - $timestart);
			warn "###CF Trim galore (SE mode) successfully exited, took $duration..\n";
			if(-e $output_fn){
				print RUN "$job_id\t$output_fn\n";
			} else {
				warn "\nTrim Galore output file $output_fn not found..\n";
			}
		} else {
			die "###CF ## Trim Galore (SE mode) exited with an error state ###\n\n";
		}
	}
}

# Go through the paired end files and run trim galore
if($pe_files && scalar(@$pe_files) > 0){
	foreach my $files_ref (@$pe_files){
		my @files = @$files_ref;
		if(scalar(@files) == 2){
			
			# Figure out the encoding if we don't already know
			if(!$encoding){
				($encoding) = CF::Helpers::fastq_encoding_type($files[0]);
			}
			if(!$encoding){
				($encoding) = CF::Helpers::fastq_encoding_type($files[1]);
			}
			
			my $enc = "";
			if($encoding eq 'phred33' || $encoding eq 'phred64'){
				$enc = '--'.$encoding;
			}
		
			my $output_fn_1 = trim_galore_basename($files[0]).'_val_1.fq.gz';
			my $output_fn_2 = trim_galore_basename($files[1]).'_val_2.fq.gz';
			
			my $command = "trim_galore --paired --trim1 --gzip $enc $RRBS --fastqc ".$files[0]." ".$files[1];
			warn "\nRunning command:\n$command\n\n";
			
			if(!system ($command)){
				# Trim Galore worked - print out resulting filenames
				my $duration =  CF::Helpers::parse_seconds(time - $timestart);
				warn "###CF Trim galore (PE mode) successfully exited, took $duration..\n";
				if(-e $output_fn_1){
					print RUN "$job_id\t$output_fn_1\n";
				} else {
					warn "\nTrim Galore output file $output_fn_1 not found..\n";
				}
				if(-e $output_fn_2){
					print RUN "$job_id\t$output_fn_2\n";
				} else {
					warn "\nTrim Galore output file $output_fn_2 not found..\n";
				}
			} else {
				die "###CF ## Trim Galore (PE mode) exited with an error state ###\n\n";
			}
		} else {
			warn "\n###CF ## Trim Galore paired end files had ".scalar(@files)." input files instead of 2..\n";
		}
	}
}

sub trim_galore_basename {
	
	my ($fn) = @_;
	
	if ($fn =~ /\.fastq$/){
		$fn =~ s/\.fastq$//;
	} elsif ($fn =~ /\.fastq\.gz$/){
		$fn =~ s/\.fastq\.gz$//;
	} elsif ($fn =~ /\.fq$/){
		$fn =~ s/\.fq$//;
	} elsif ($fn =~ /\.fq\.gz$/){
		$fn =~ s/\.fq\.gz$//;
	}
	
	return $fn;
}


close (RUN);